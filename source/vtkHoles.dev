.. code-block:: cpp
   // block with holes
   #include <vtkNew.h>
   #include <vtkPoints.h>
   #include <vtkDoubleArray.h>
   #include <vtkCellData.h>
   #include <vtkStructuredGrid.h>
   #include <vtkXMLStructuredGridWriter.h>

                int main(int, char*[])
                {
                // Create a grid.
                vtkNew<vtkStructuredGrid> structuredGrid;
                // Specify size
                int dims[3] = {6, 8, 1};
                auto numPts = dims[0] * dims[1] * dims[2];
                auto numCells = (dims[0]-1) * (dims[1]-1) * (dims[2]); // FIXME
                //structuredGrid->SetExtent(0, dims[0], 0, dims[1], 0, dims[2]);
                structuredGrid->SetDimensions(dims);
                // specify grid points
                vtkNew<vtkPoints> points;
                points->Allocate(numPts);

                std::vector<int> holeCells{11, 12, 16, 17};
                // loop over the domains
                unsigned int counter = 0;
                // Create a 5x5 grid of points
                for (unsigned int j = 0; j < dims[1]; j++)
                {
                for (unsigned int i = 0; i < dims[0]; i++)
                {
                double loc[3] = {(double)i, (double)j, 0.};
                // cut holes in domain
                // Make one point higher than the rest
                if ((i >= 2 && j >= 3) && (i <= 3 && j <= 4))
                {
                loc[2] = 1.;
                points->InsertPoint(counter, loc);
                //points->SetPoint(counter, loc);
                // holeCells.push_back(i + j%(dims[1]-1));
                //holeCells.push_back(i + j*(dims[1]-1));
                std::cout << "The different point is number " << counter << std::endl;
                }
                else
                {
                // Make most of the points the same height
                points->InsertPoint(counter, loc);
                //points->SetPoint(counter, loc);
                }
                counter++;
                }
                }

                structuredGrid->SetPoints(points);
                //structuredGrid->BlankPoint(0);
                for (auto h : holeCells)
                {
                structuredGrid->BlankCell(h);
                }

                // add data
                {
                vtkNew<vtkDoubleArray> cellValues;
                cellValues->SetName("vals0"); // exported variable name
                // set number of values per element, and number of element.
                // order matters if it is going to allocate the size correctly
                cellValues->SetNumberOfComponents(1);
                cellValues->SetNumberOfTuples(numCells);
                // initialize default values
                //cellValues->Fill(0.);
                for (size_t i = 0; i < numCells; ++i)
                {
                cellValues->SetValue(i, 1.); // okay because size known, otherwise use InsertValue
                }
                // tie the array to the grid
                structuredGrid->GetCellData()->AddArray(cellValues);
                }

                {
                vtkNew<vtkDoubleArray> cellValues;
                cellValues->SetName("vals1");
                cellValues->SetNumberOfTuples(numCells);
                cellValues->SetNumberOfComponents(1);
                for (size_t i = 0; i < numCells; ++i)
                {
                cellValues->SetValue(i, i);
                }
                structuredGrid->GetCellData()->AddArray(cellValues);
                }

                {
                vtkNew<vtkDoubleArray> cellValues;
                cellValues->SetName("vel");
                cellValues->SetNumberOfComponents(2);
                cellValues->SetNumberOfTuples(numCells);
                for (size_t i = 0; i < numCells; ++i)
                {
                double vel[2] = {i, i*i};
                cellValues->SetTuple(i, vel);
                cellValues->InsertTuple(i, vel);
                }
                structuredGrid->GetCellData()->AddArray(cellValues);
                }

                // {
                //   vtkNew<vtkDoubleArray> cellValues;
                //   cellValues->SetName("H");
                //   cellValues->SetNumberOfComponents(3);
                //   cellValues->SetNumberOfTuples(numCells);
                //   for (size_t i = 0; i < numCells; ++i)
                //     {
                //       double vel[2] = {+i, -i};
                //       // cellValues->SetTuple3(i, 1,2,3);
                //       cellValues->SetTuple(i, vel);
                //     }
                //   structuredGrid->GetCellData()->AddArray(cellValues);
                // }

                // Write file.
                vtkNew<vtkXMLStructuredGridWriter> writer;
                writer->SetFileName("output.vts");
                writer->SetInputData(structuredGrid);
                writer->Write();
                }


.. code-block:: cpp
   // multi-block
   #include <vtkNew.h>
   #include <vtkPoints.h>
   #include <vtkDoubleArray.h>
   #include <vtkCellData.h>
   #include <vtkStructuredGrid.h>
   #include <vtkMPIController.h>
   #include <vtkXMLStructuredGridWriter.h>
   #include <vtkXMLPStructuredGridWriter.h>

   #include <vtkPartitionedDataSet.h>
   #include <vtkXMLPartitionedDataSetWriter.h>

   int main(int argc, const char* argv[])
   {
   MPI_Init(&argc, &argv);
   int myrank, numProc;
   MPI_Comm_rank(MPI_COMM_WORLD, &myrank);
   MPI_Comm_size(MPI_COMM_WORLD, &numProc);

   // VTK internal understanding of MPI, expects MPI to already be initialized
   auto contr = vtkSmartPointer<vtkMPIController>::New();
   int*  unused_argc;
   char*** unused_argv;
   contr->Initialize(unused_argc, unused_argv, 1);

   // Create a grid.
   vtkNew<vtkStructuredGrid> structuredGrid;
   // Specify global size
   int dims[3] = {6, 8, 1};
   auto numPts = dims[0] * dims[1] * dims[2];
   auto numCells = (dims[0]-1) * (dims[1]-1) * (dims[2]);
   // Specify local size

   int dimsLocal[3];
   int dimsLo[3];
   int dimsHi[3];
   if (myrank == 0)
   {
   dimsLo[0] = 0;
   dimsLo[1] = 0;
   dimsLo[2] = 0;
   dimsHi[0] = 6;
   dimsHi[1] = 4;
   dimsHi[2] = 1;
   }
   else if (myrank == 1)
   {
   dimsLo[0] = 0;
   dimsLo[1] = 3;
   dimsLo[2] = 0;
   dimsHi[0] = 6;
   dimsHi[1] = 8;
   dimsHi[2] = 1;
   }
   dimsLocal[0] = dimsHi[0] - dimsLo[0];
   dimsLocal[1] = dimsHi[1] - dimsLo[1];
   dimsLocal[2] = dimsHi[2] - dimsLo[2];
   auto numPtsLocal = dimsLocal[0] * dimsLocal[1] * dimsLocal[2];
   auto numCellsLocal = (dimsLocal[0]-1) * (dimsLocal[1]-1) * (dimsLocal[2]);
   //
   structuredGrid->SetDimensions(dimsLocal);
   // specify grid points
   vtkNew<vtkPoints> points;
   points->Allocate(numPtsLocal);

   // loop over the domains
   unsigned int counter = 0;
   // Create a 5x5 grid of points
   for (unsigned int j = dimsLo[1]; j < dimsHi[1]; j++)
   {
   for (unsigned int i = dimsLo[0]; i < dimsHi[0]; i++)
   {
   double loc[3] = {(double)i, (double)j, 0.};
   points->InsertPoint(counter, loc);
   counter++;
   }
   }
   structuredGrid->SetPoints(points);
   //structuredGrid->BlankPoint(0);
   // std::vector<int> holeCells{11, 12, 16, 17};
   // for (auto h : holeCells)
   //   {
   //     structuredGrid->BlankCell(h);
   //   }

   // add data
   {
   vtkNew<vtkDoubleArray> cellValues;
   cellValues->SetName("vals0"); // exported variable name
   // set number of values per element, and number of element.
   // order matters if it is going to allocate the size correctly
   cellValues->SetNumberOfComponents(1);
   cellValues->SetNumberOfTuples(numCellsLocal);
   // initialize default values
   //cellValues->Fill(0.);
   for (size_t i = 0; i < numCellsLocal; ++i)
   {
   cellValues->SetValue(i, myrank); // okay because size known, otherwise use InsertValue
   }
   // tie the array to the grid
   structuredGrid->GetCellData()->AddArray(cellValues);
   }

   // Write file.
   // vtkNew<vtkXMLStructuredGridWriter> writer;
   // writer->SetFileName(("output_"+std::to_string(myrank)+".vts").c_str());
   // writer->SetInputData(structuredGrid);
   // writer->SetDataModeToBinary();
   // //writer->SetDataModeToAscii();
   // writer->Write();

   //structuredGrid->SetExtent(0, dims[0], 0, dims[1], 0, dims[2]);

   // vtkNew<vtkXMLPStructuredGridWriter> writer;
   // // writer->SetFileName(("output_"+std::to_string(myrank)+".pvts").c_str());
   // writer->SetFileName("Poutput.pvts");
   // writer->SetInputData(structuredGrid);
   // writer->WriteSummaryFileOff();
   // writer->SetUseSubdirectory(true);
   // writer->SetController(contr);
   // writer->SetNumberOfPieces(numProc);
   // writer->SetStartPiece(myrank);
   // writer->SetEndPiece(myrank);
   // //writer->SetDataModeToBinary();
   // writer->SetDataModeToAscii();
   // writer->Update();
   // writer->Write();

   // accumulate all bricks together
   // allow logical space for empty bricks but no data is written
   vtkNew<vtkPartitionedDataSet> part;
   part->SetNumberOfPartitions(10);
   part->SetPartition(myrank, structuredGrid);

   vtkNew<vtkXMLPartitionedDataSetWriter> writer;
   writer->SetFileName((std::string("PPoutput.") + writer->GetDefaultFileExtension()).c_str());
   writer->SetInputData(part);
   writer->SetController(contr);
   //writer->SetDataModeToAscii(); // make human readable for debugging
   writer->SetDataModeToBinary();
   writer->SetCompressorTypeToZLib();
   writer->SetCompressionLevel(9); // maximum compression
   writer->Update();
   writer->Write();

   MPI_Finalize();
   }
